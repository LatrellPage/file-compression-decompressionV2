{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useFileSelector","selectedFile","setSelectedFile","useState","loading","setLoading","fileSelected","setFileSelected","message","setMessage","useEffect","timer","setTimeout","type","clearTimeout","handleFileSelect","event","target","files","handleCompression","async","formData","FormData","append","console","log","name","response","axios","post","responseType","headers","Content-Type","compressedFile","Blob","data","downloadLink","document","createElement","href","window","URL","createObjectURL","download","concat","click","text","error","status","request","App","React","className","style","width","color","Button","variant","onClick","triggerFileInput","getElementById","disabled","CircularProgress","size","accept","onChange","display","id","Snackbar","open","autoHideDuration","onClose","TransitionComponent","Fade","Alert","severity","sx","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.0743d4c8.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Button, Snackbar, Alert, CircularProgress, Fade } from '@mui/material';\n\nfunction App() {\n    const {\n        selectedFile,\n        handleFileSelect,\n        handleCompression,\n        loading,\n        fileSelected,\n        message,\n        setMessage\n    } = useFileSelector();\n\n    const triggerFileInput = () => {\n        document.getElementById(\"fileInput\").click();\n    };\n\n    return (\n        <div className=\"parent-container\">\n            <div>\n                <div className=\"p-container\">\n                    <h1 className=\"header-text\">{fileSelected ? \"\" : \"Upload a file to compress\"}</h1>\n                </div>\n                <div className=\"p-container\">\n                    <p style={{ width: \"fit-content\" }}>\n                        {fileSelected ? \"\" : \"Select a file to reduce its file size with our compressor\"}\n                    </p>\n                </div>\n                {selectedFile && (\n                    <div className=\"p-container\">\n                        <p style={{ width: \"fit-content\", color: \"#0866fd\" }}>{selectedFile.name}</p>\n                    </div>\n                )}\n                <div className=\"button-container\">\n                    <Button\n                        variant=\"contained\"\n                        onClick={fileSelected ? handleCompression : triggerFileInput}\n                        disabled={loading}\n                    >\n                        {loading ? <CircularProgress size={24} /> : fileSelected ? \"Compress File\" : \"Select File\"}\n                    </Button>\n                </div>\n                <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleFileSelect}\n                    style={{ display: \"none\" }}\n                    id=\"fileInput\"\n                />\n            </div>\n            <Snackbar\n                open={!!message}\n                autoHideDuration={3000}\n                onClose={() => setMessage(null)}\n                TransitionComponent={Fade}\n            >\n                <Alert\n                    onClose={() => setMessage(null)}\n                    severity={message?.type}\n                    sx={{ width: '100%' }}\n                    variant=\"filled\"\n                >\n                    {message?.text}\n                </Alert>\n            </Snackbar>\n        </div>\n    );\n}\n\nconst useFileSelector = () => {\n    const [selectedFile, setSelectedFile] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [fileSelected, setFileSelected] = useState(false);\n    const [message, setMessage] = useState(null);\n\n    useEffect(() => {\n        if (message) {\n            const timer = setTimeout(() => {\n                setMessage(null);\n                if (message.type === 'success') {\n                    // Reset UI after successful compression\n                    setSelectedFile(null);\n                    setFileSelected(false);\n                }\n            }, 3000);\n            return () => clearTimeout(timer);\n        }\n    }, [message]);\n\n    const handleFileSelect = (event) => {\n        if (event.target && event.target.files) {\n            setSelectedFile(event.target.files[0]);\n            setFileSelected(true);\n            setMessage(null);\n        }\n    };\n\n    const handleCompression = async () => {\n        if (!selectedFile) return;\n\n        setLoading(true);\n        setMessage(null);\n        const formData = new FormData();\n        formData.append('file', selectedFile);\n        formData.append('compressorType', 'gz');\n\n        try {\n            console.log('Sending file to server:', selectedFile.name);\n            const response = await axios.post('http://localhost:8080/api/compress', formData, {\n                responseType: 'blob',\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            });\n            console.log('Received response from server:', response);\n\n            // Handle the compressed file response\n            const compressedFile = new Blob([response.data], { type: response.headers['content-type'] });\n\n            // Trigger file download\n            const downloadLink = document.createElement('a');\n            downloadLink.href = window.URL.createObjectURL(compressedFile);\n            downloadLink.download = `${selectedFile.name}.gz`;\n            downloadLink.click();\n            console.log('File download triggered');\n\n            setMessage({ type: 'success', text: `${selectedFile.name} compressed successfully!` });\n\n            // Reset UI state after successful compression\n            setTimeout(() => {\n                setSelectedFile(null);\n                setFileSelected(false);\n            }, 3000);\n\n        } catch (error) {\n            console.error('Error compressing file:', error);\n            if (error.response) {\n                setMessage({ type: 'error', text: `Server error: ${error.response.status}` });\n            } else if (error.request) {\n                setMessage({ type: 'error', text: 'No response received from server' });\n            } else {\n                setMessage({ type: 'error', text: `Error: ${error.message}` });\n            }\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return { selectedFile, handleFileSelect, handleCompression, loading, fileSelected, message, setMessage };\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}